# -*- coding: utf8 -*-


a = []
check = []
cycle = []
notCycle = []


for i in range(8+1):
    a.append([])
    check.append(0)
    notCycle.append(0)


for i in range(8):
    str = raw_input()
    str = str.split(' ')
    node = str[0]
    v = str[1]
    w = str[2]

    vector = [int(v), int(w)]
    a[int(node)].append(vector)


for i in a:
    print i


def dfs(start, node):
    check[node] = 1
    cycle.append(start)
    for i in range(len(a[node])):
        y = a[node][i][0]
        if check[y] == 0:
            return dfs(node, y)
        elif check[y] == 1 and node == y: #자기 자신일 경우
            notCycle[y] = 1
            return 0
        elif check[y] == 1 and y in cycle: #사이클일 경우
            cycle.append(node)
            for j in cycle:
                notCycle[j] = 1
            return 0


for i in range(1, len(a)):
    cycle = []
    start = i
    node = i
    if check[i] == 0:
        dfs(start, node)


print notCycle
